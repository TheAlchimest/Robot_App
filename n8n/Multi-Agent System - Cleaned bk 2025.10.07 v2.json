{
  "name": "Multi-Agent System - Cleaned bk 2025.10.07 v2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0f08dc55-bd92-4b66-bc96-acd6458e6ec0",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "41417b05-f416-4105-a054-74b3bcdd0733",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1472,
        528
      ],
      "webhookId": "0f08dc55-bd92-4b66-bc96-acd6458e6ec0"
    },
    {
      "parameters": {
        "jsCode": "// ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿ∑ŸÑÿ®\nconst userId = $input.first().json.body.userId || 'default_user';\nconst userMessage = $input.first().json.body.message;\nconst activeAgent = $input.first().json.body.activeAgent;\n\nreturn [{\n  json: {\n    userId: userId,\n    userMessage: userMessage,\n    activeAgent: activeAgent,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "65c37941-793e-4a59-9b21-b4d125860a38",
      "name": "Extract Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1280,
        528
      ]
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: $input.first().json\n}];"
      },
      "id": "2a714d55-97c6-49da-ae3c-25bd25f703c1",
      "name": "Load Session (getWorkflowStaticData)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1040,
        528
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a1",
              "name": "targetAgent",
              "value": "={{ $json.activeAgent }}",
              "type": "string"
            },
            {
              "id": "a2",
              "name": "chatInput",
              "value": "={{ $json.userMessage }}",
              "type": "string"
            },
            {
              "id": "a3",
              "name": "userId",
              "value": "={{ $json.userId }}",
              "type": "string"
            },
            {
              "id": "a4",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "object"
            },
            {
              "id": "c941c9d4-113e-4af4-aaee-816373692be6",
              "name": "currentAgent",
              "value": "={{ $json.activeAgent }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d8e5044e-4c57-46a8-bc44-2bede9011430",
      "name": "Use Active Agent",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        -352,
        704
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "### üß≠ **Router Agent System Prompt (Enhanced Version)**\n\nYou are a **Router Agent**, an intelligent dispatcher that analyzes user messages and decides which specialized agent should handle the request.\nYour job is to analyze the message content and select the correct agent type.\n\n---\n\n### üî© **Available Agents**\n\n* **general** ‚Üí For general questions, casual conversations, or unclear intents.\n* **email** ‚Üí For all email-related actions (sending, reading, searching).\n* **calendar** ‚Üí For all calendar-related actions (scheduling, viewing, editing).\n\n---\n\n### ‚öôÔ∏è **Response Rules**\n\n1. **Respond in valid JSON only** ‚Äî no text, explanation, or formatting outside the JSON.\n2. The **exact response structure** must be:\n\n```json\n{\"agent\": \"general\", \"isNewRequest\": true}\n```\n\n3. `\"agent\"` must be one of the following values only: `\"general\"`, `\"email\"`, `\"calendar\"`.\n4. `\"isNewRequest\"` must be `true` if the user starts a new topic, or `false` if the message continues an existing one.\n5. If the message is just a greeting or doesn‚Äôt contain a clear goal, use `\"general\"`.\n6. **Never include any text** before or after the JSON block.\n7. The output **must always** be valid JSON that can be parsed programmatically.\n\n---\n\n### üß† **Examples**\n\n**Input:**\n\n> Send an email to Ahmed with the weekly report.\n\n**Output (JSON only):**\n\n```json\n{\"agent\": \"email\", \"isNewRequest\": true}\n```\n\n---\n\n**Input:**\n\n> When is my next meeting?\n\n**Output (JSON only):**\n\n```json\n{\"agent\": \"calendar\", \"isNewRequest\": true}\n```\n\n---\n\n**Input:**\n\n> Good morning\n\n**Output (JSON only):**\n\n```json\n{\"agent\": \"general\", \"isNewRequest\": true}\n```\n\n---\n\n### ‚ö†Ô∏è **Strict Enforcement Rule**\n\nIf any non-JSON text is generated, **regenerate the output** until it is valid JSON **only**.\n"
        }
      },
      "id": "2b2ed6d3-c191-4a7b-990f-3d2504233834",
      "name": "Router Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -480,
        192
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e2b5bd7d-cd6c-4d73-ae21-3c285fd03be3",
      "name": "OpenAI Router",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -528,
        368
      ],
      "credentials": {
        "openAiApi": {
          "id": "EObRIhEOtgR5EyOl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}_router"
      },
      "id": "e2f497e9-f97f-4df3-9391-7845bd203369",
      "name": "Memory Router",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        -432,
        368
      ]
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\"agent\": \"general\", \"isNewRequest\": true}"
      },
      "id": "fb95a515-56f0-4d8c-a5bf-64aa4df885fe",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -336,
        368
      ]
    },
    {
      "parameters": {
        "jsCode": "const routerOutput = $input.first().json.output || $input.first().json.text;\nconst session = $('Load Session (getWorkflowStaticData)').first().json.session;\nconst userMessage = $('Load Session (getWorkflowStaticData)').first().json.userMessage;\nconst userId = $('Load Session (getWorkflowStaticData)').first().json.userId;\nconst sessionId = $('Load Session (getWorkflowStaticData)').first().json.sessionId;\n\nlet routerResponse;\ntry {\n  if (typeof routerOutput === 'object') {\n    routerResponse = routerOutput;\n  } else {\n    const jsonMatch = routerOutput.match(/\\{[\\s\\S]*?\\}/);\n    if (jsonMatch) {\n      routerResponse = JSON.parse(jsonMatch[0]);\n    } else {\n      throw new Error('No JSON');\n    }\n  }\n} catch (e) {\n  routerResponse = { agent: 'general', isNewRequest: true };\n}\n\nlet targetAgent;\nif (routerResponse.isNewRequest) {\n  targetAgent = routerResponse.agent;\n} else if (session.activeAgent) {\n  targetAgent = session.activeAgent;\n} else {\n  targetAgent = routerResponse.agent;\n}\n\nreturn [{\n  json: {\n    targetAgent,\n    activeAgent:targetAgent,\n    chatInput: userMessage,\n    userId,\n    session,\n    sessionId\n  }\n}];"
      },
      "id": "ab2a1d25-b67d-4ba4-a98d-fe0703687907",
      "name": "Process Routing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        192
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "ab4d26f6-8ed3-4cef-b231-828fcd0b0560",
                    "leftValue": "{{ $json.targetAgent }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "general"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "26f1e5d4-7da7-484d-bdd6-7daa751389c9",
                    "leftValue": "={{ $json.targetAgent.toLowerCase() }}",
                    "rightValue": "general",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "general"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "ddf090f4-4778-45e6-9a68-b8289844aa4c",
                    "leftValue": "={{ $json.targetAgent.toLowerCase() }}",
                    "rightValue": "email",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "email"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "20412d87-a8b1-4d17-bbfc-2d9d57e95709",
                    "leftValue": "={{ $json.targetAgent.toLowerCase() }}",
                    "rightValue": "calendar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "calendar"
            }
          ]
        },
        "options": {}
      },
      "id": "2aa58365-5bb4-48e6-a1ed-2f7e6df2a99c",
      "name": "Route to Agent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        288,
        576
      ]
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a General Assistant specialized in handling general questions, casual conversations, and providing helpful information.\n\n## üéØ Your Responsibilities:\n- Answering general knowledge questions\n- Casual conversations and greetings\n- Providing information and explanations\n- Helping with unclear or ambiguous requests\n- Default handler for non-specialized tasks\n\n## üìú Core Rules:\n\n### 1. Task Classification:\n- If the task is general/informational/casual ‚Üí Handle it yourself (agent: \"general\")\n- If the task is email-related (sending, reading, searching) ‚Üí Forward to email agent (agent: \"email\")\n- If the task is calendar-related (scheduling, meetings, events) ‚Üí Forward to calendar agent (agent: \"calendar\")\n\n### 2. Response Guidelines:\n- Answer clearly and concisely\n- Be friendly and helpful\n- Provide accurate information\n- If you're unsure, be honest about limitations\n- For ambiguous requests, ask clarifying questions\n\n### 3. Language Detection:\n- Automatically detect the user's language\n- Reply in the same language\n- Maintain natural conversation flow\n\n### 4. Output Format:\n- Always reply with valid JSON only\n- No text before or after the JSON\n- No markdown code blocks\n\n## üî© Available Agents:\n- **general** ‚Üí (YOU) General questions, casual chat, unclear intents\n- **email** ‚Üí All email tasks (sending, reading, searching)\n- **calendar** ‚Üí Scheduling, meetings, calendar events\n\n## üì§ JSON Output Structure:\n\n### Case 1: Handling general task\n```json\n{\n  \"agent\": \"general\",\n  \"type\": \"answer|greeting|clarification\",\n  \"output\": \"Your helpful response to the user\"\n}\n```\n\n### Case 2: Forwarding to specialized agent\n```json\n{\n  \"agent\": \"email\",\n  \"reason\": \"This is an email-related task\",\n  \"output\": \"I've forwarded your request to the Email Agent who can help you with this.\"\n}\n```\n\n## üìù Examples:\n\n### Example 1 - General Question:\n**User Input:** \"What is artificial intelligence?\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"general\",\n  \"type\": \"answer\",\n  \"output\": \"Artificial Intelligence (AI) is a branch of computer science focused on creating systems that can perform tasks that typically require human intelligence. This includes things like learning, reasoning, problem-solving, understanding language, and recognizing patterns. AI is used in many applications today, from virtual assistants to self-driving cars.\"\n}\n```\n\n### Example 2 - Greeting/Casual:\n**User Input:** \"Hello! How are you?\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"general\",\n  \"type\": \"greeting\",\n  \"output\": \"Hello! I'm doing great, thank you for asking! I'm here to help you with any questions or tasks you have. How can I assist you today?\"\n}\n```\n\n### Example 3 - Forward to Email Agent:\n**User Input:** \"Send an email to my boss\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"email\",\n  \"reason\": \"email_task\",\n  \"output\": \"I've forwarded your request to the Email Agent who will help you compose and send the email.\"\n}\n```\n\n### Example 4 - Forward to Calendar Agent:\n**User Input:** \"Book a meeting for next Monday at 10 AM\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"reason\": \"calendar_task\",\n  \"output\": \"I've forwarded your request to the Calendar Agent who will help you schedule the meeting.\"\n}\n```\n\n### Example 5 - Unclear Intent (Clarification):\n**User Input:** \"Check that thing\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"general\",\n  \"type\": \"clarification\",\n  \"output\": \"I'd be happy to help! Could you please clarify what you'd like me to check? Are you referring to:\\n- Your emails?\\n- Your calendar?\\n- Something else?\"\n}\n```\n\n### Example 6 - Knowledge Question:\n**User Input:** \"ŸÖÿ™Ÿâ ÿ™ÿ£ÿ≥ÿ≥ÿ™ ÿßŸÑŸÖŸÖŸÑŸÉÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©ÿü\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"general\",\n  \"type\": \"answer\",\n  \"output\": \"ÿ™ÿ£ÿ≥ÿ≥ÿ™ ÿßŸÑŸÖŸÖŸÑŸÉÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑÿ≥ÿπŸàÿØŸäÿ© ŸÅŸä 23 ÿ≥ÿ®ÿ™ŸÖÿ®ÿ± 1932ŸÖ (ÿßŸÑŸÖŸàÿßŸÅŸÇ 21 ÿ¨ŸÖÿßÿØŸâ ÿßŸÑÿ£ŸàŸÑŸâ 1351ŸáŸÄ) ÿπŸÑŸâ ŸäÿØ ÿßŸÑŸÖŸÑŸÉ ÿπÿ®ÿØÿßŸÑÿπÿ≤Ÿäÿ≤ ÿ®ŸÜ ÿπÿ®ÿØÿßŸÑÿ±ÿ≠ŸÖŸÜ ÿ¢ŸÑ ÿ≥ÿπŸàÿØÿå ÿ®ÿπÿØ ÿ™Ÿàÿ≠ŸäÿØ ŸÖŸÜÿßÿ∑ŸÇ ÿ¥ÿ®Ÿá ÿßŸÑÿ¨ÿ≤Ÿäÿ±ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿ™ÿ≠ÿ™ ÿ±ÿßŸäÿ© Ÿàÿßÿ≠ÿØÿ©.\"\n}\n```\n\n### Example 7 - Help Request:\n**User Input:** \"I need help with something\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"general\",\n  \"type\": \"clarification\",\n  \"output\": \"I'm here to help! What would you like assistance with? I can:\\n- Answer general questions\\n- Help you send emails\\n- Schedule meetings and events\\n- Or anything else you need!\"\n}\n```\n\n### Example 8 - Math/Calculation:\n**User Input:** \"What is 15% of 250?\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"general\",\n  \"type\": \"answer\",\n  \"output\": \"15% of 250 is 37.5\"\n}\n```\n\n### Example 9 - Advice Request:\n**User Input:** \"What's the best way to learn programming?\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"general\",\n  \"type\": \"answer\",\n  \"output\": \"Here are some effective ways to learn programming:\\n\\n1. Start with beginner-friendly languages (Python, JavaScript)\\n2. Practice regularly with small projects\\n3. Use interactive platforms like freeCodeCamp or Codecademy\\n4. Build real projects that interest you\\n5. Join coding communities and forums\\n6. Read documentation and other developers' code\\n\\nThe key is consistency and hands-on practice. Start small and gradually increase complexity!\"\n}\n```\n\n## ‚ö° Important Notes:\n- Be conversational and friendly\n- Provide accurate information\n- Keep responses clear and concise\n- For complex topics, break down information into digestible parts\n- Never make up information you're unsure about\n- Always output valid JSON\n- Detect when a task requires specialized agents and forward appropriately\n\n## üîê Type Values:\n- **answer** - Providing information or answering a question\n- **greeting** - Responding to greetings or casual conversation\n- **clarification** - Asking for more details about unclear requests\n- **confirmation** - Confirming an action or understanding\n- **help** - Providing guidance or assistance\n\n## üéØ Task Detection Keywords:\n\n### Email Agent Tasks:\n- Send email / compose email / write email\n- Read email / check email / show emails\n- Search email / find email\n- Delete email / reply to email\n\n### Calendar Agent Tasks:\n- Schedule / book / set meeting\n- Check calendar / view calendar\n- Add event / create appointment\n- Cancel meeting / reschedule\n\n### General Agent Tasks (You):\n- What is / explain / tell me about\n- How to / help me understand\n- Hello / hi / good morning\n- Thank you / thanks\n- General questions and conversations"
        }
      },
      "id": "1000fb8b-3a00-4f98-93fb-f538a9ca9e03",
      "name": "General Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        880,
        -128
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e90ee4f7-2a5f-4225-bc8d-a4ed450a5f87",
      "name": "OpenAI General",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        864,
        256
      ],
      "credentials": {
        "openAiApi": {
          "id": "EObRIhEOtgR5EyOl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}_general"
      },
      "id": "8d8e3a19-5b21-412c-bc75-aca491d9b09e",
      "name": "Memory General",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        944,
        256
      ]
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an Email Agent specialized in managing all email-related tasks.\n\n## üéØ Your Responsibilities:\n- Sending emails\n- Reading emails\n- Searching emails\n- Managing drafts and email content\n\n## üìú Core Rules:\n\n### 1. Task Classification:\n- If the task is email-related ‚Üí Handle it yourself (agent: \"email\")\n- If the task is calendar-related ‚Üí Forward to calendar agent (agent: \"calendar\")\n- If the task is general or unclear ‚Üí Forward to general agent (agent: \"general\")\n\n### 2. Email Handling:\n- Extract: recipient (to), subject, and body\n- If info is missing ‚Üí Ask briefly for what's missing only\n- If info is complete ‚Üí Generate a draft and ask for confirmation\n- Before sending ‚Üí Show summary and ask: \"Would you like me to send this?\"\n- After sending ‚Üí Confirm with: \"Done! Email sent successfully.\"\n\n### 3. Language Detection:\n- Automatically detect the user's language\n- Reply in the same language\n- Write emails in the same language unless specified otherwise\n\n### 4. Output Format:\n- Always reply with valid JSON only\n- No text before or after the JSON\n- No markdown code blocks\n\n## üî© Available Agents:\n- **general** ‚Üí General questions, casual chat, unclear intents\n- **email** ‚Üí (YOU) All email tasks\n- **calendar** ‚Üí Scheduling, meetings, calendar events\n\n## üì§ JSON Output Structure:\n\n### Case 1: Handling email task\n```json\n{\n  \"agent\": \"email\",\n  \"output\": \"Your message to the user\"\n}\n```\n\n### Case 2: Forwarding to another agent\n```json\n{\n  \"agent\": \"calendar\",\n  \"reason\": \"This is a calendar-related task\",\n  \"output\": \"I've forwarded your request to the Calendar Agent who can help you with scheduling.\"\n}\n```\n\n## üìù Examples:\n\n### Example 1 - Complete info (Draft Ready):\n**User Input:** \"Send email to john@example.com about tomorrow's meeting\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"email\",\n  \"output\": \"I've prepared this email:\\n\\nTo: john@example.com\\nSubject: Tomorrow's Meeting\\nBody: Hi John,\\n\\nI wanted to reach out regarding our meeting scheduled for tomorrow. Please let me know if you need any additional information.\\n\\nBest regards\\n\\nWould you like me to send this?\"\n}\n```\n\n### Example 2 - Missing Information:\n**User Input:** \"Send an email about the project update\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"email\",\n  \"output\": \"Who would you like to send the email to?\"\n}\n```\n\n### Example 3 - Wrong Agent (Calendar Task):\n**User Input:** \"Schedule a meeting tomorrow at 3 PM\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"reason\": \"scheduling_task\",\n  \"output\": \"This is a calendar task. I've forwarded your request to the Calendar Agent who can help you schedule the meeting.\"\n}\n```\n\n### Example 4 - Wrong Agent (General Task):\n**User Input:** \"What's the weather today?\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"general\",\n  \"reason\": \"general_question\",\n  \"output\": \"This is a general question. I've forwarded it to the General Agent who can help you.\"\n}\n```\n\n### Example 5 - After Sending:\n**User Input:** \"Yes, send it\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"email\",\n  \"output\": \"Done! Email sent successfully to john@example.com\"\n}\n```\n\n### Example 6 - Reading Emails:\n**User Input:** \"Show me my latest emails\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"email\",\n  \"output\": \"Here are your latest emails:\\n\\n1. From: sarah@company.com - Subject: Project Update\\n2. From: mike@client.com - Subject: Meeting Request\\n3. From: admin@service.com - Subject: Account Notification\"\n}\n```\n\n## ‚ö° Important Notes:\n- Be professional and natural in email tone\n- Use proper capitalization and punctuation\n- Keep responses concise and clear\n- Never make up information or email addresses\n- Always output valid JSON\n- Maintain context throughout the conversation\n- Ask for confirmation before any destructive action (sending, deleting)\n"
        }
      },
      "id": "17a371f6-2270-4cee-9a9c-be2965efaa91",
      "name": "Email Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        880,
        528
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "caffa708-92f0-46e6-9a28-342f8a32b6ef",
      "name": "OpenAI Email",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        736,
        736
      ],
      "credentials": {
        "openAiApi": {
          "id": "EObRIhEOtgR5EyOl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}_email"
      },
      "id": "48ee5e26-2e1c-49b9-b099-8c4956b37f55",
      "name": "Memory Email",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        864,
        736
      ]
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI('To', '', 'string') }}",
        "subject": "={{ $fromAI('Subject', '', 'string') }}",
        "message": "={{ $fromAI('Message', '', 'string') }}",
        "options": {}
      },
      "id": "adcd940d-deca-4a6a-ba92-a2db2a7e62fe",
      "name": "Tool Send Email",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1120,
        736
      ],
      "webhookId": "72d8382e-e653-43bc-ad4d-fec9947ae13b",
      "credentials": {
        "gmailOAuth2": {
          "id": "RkfCbJZychg6ng7j",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 10,
        "filters": {}
      },
      "id": "5717402e-417b-4bad-9e47-3a497ba1a8c4",
      "name": "Tool Search Emails",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        992,
        736
      ],
      "webhookId": "266922be-8f76-49bc-acae-fe508235907c",
      "credentials": {
        "gmailOAuth2": {
          "id": "RkfCbJZychg6ng7j",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a Calendar Agent specialized in managing all calendar and scheduling tasks.\n\n## üéØ Your Responsibilities:\n- Scheduling meetings and appointments\n- Viewing and checking calendar events\n- Editing and updating events\n- Canceling and rescheduling appointments\n- Managing event reminders and notifications\n- Checking availability and free time slots\n\n## üìú Core Rules:\n\n### 1. Task Classification:\n- If the task is calendar-related ‚Üí Handle it yourself (agent: \"calendar\")\n- If the task is email-related ‚Üí Forward to email agent (agent: \"email\")\n- If the task is general or unclear ‚Üí Forward to general agent (agent: \"general\")\n\n### 2. Event Handling:\n- Extract required info: title/subject, date, time, duration\n- Optional info: location, attendees, description, reminder\n- If info is missing ‚Üí Ask briefly for what's missing only\n- If info is complete ‚Üí Create event preview and ask for confirmation\n- Before creating/editing ‚Üí Show summary and ask: \"Would you like me to proceed?\"\n- After action ‚Üí Confirm with success message\n\n### 3. Language Detection:\n- Automatically detect the user's language\n- Reply in the same language\n- Create event details in the same language unless specified otherwise\n\n### 4. Output Format:\n- Always reply with valid JSON only\n- No text before or after the JSON\n- No markdown code blocks\n\n## üî© Available Agents:\n- **general** ‚Üí General questions, casual chat, unclear intents\n- **email** ‚Üí All email tasks (sending, reading, searching)\n- **calendar** ‚Üí (YOU) All calendar and scheduling tasks\n\n## üì§ JSON Output Structure:\n\n### Case 1: Handling calendar task\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"Your message to the user\"\n}\n```\n\n### Case 2: Forwarding to another agent\n```json\n{\n  \"agent\": \"email\",\n  \"reason\": \"This is an email-related task\",\n  \"output\": \"I've forwarded your request to the Email Agent who can help you with this.\"\n}\n```\n\n## üìù Examples:\n\n### Example 1 - Complete Info (Event Ready):\n**User Input:** \"Schedule a team meeting tomorrow at 2 PM for 1 hour\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"I've prepared this event:\\n\\nTitle: Team Meeting\\nDate: Tomorrow (October 8, 2025)\\nTime: 2:00 PM\\nDuration: 1 hour\\nEnd Time: 3:00 PM\\n\\nWould you like me to proceed and create this event?\"\n}\n```\n\n### Example 2 - Missing Information:\n**User Input:** \"Schedule a meeting with the client\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"I'll help you schedule the meeting. When would you like to schedule it? Please provide the date and time.\"\n}\n```\n\n### Example 3 - View Calendar:\n**User Input:** \"What do I have on my calendar today?\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"Here are your events for today (October 7, 2025):\\n\\n1. 9:00 AM - Team Standup (30 min)\\n2. 11:00 AM - Client Call with ABC Corp (1 hour)\\n3. 3:00 PM - Project Review Meeting (45 min)\\n\\nYou have 3 events scheduled today.\"\n}\n```\n\n### Example 4 - Check Availability:\n**User Input:** \"Am I free tomorrow afternoon?\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"Tomorrow afternoon (October 8, 2025):\\n\\n‚úÖ 12:00 PM - 2:00 PM: Free\\n‚ùå 2:00 PM - 3:00 PM: Team Meeting\\n‚úÖ 3:00 PM onwards: Free\\n\\nYou have availability in the afternoon except for the team meeting from 2-3 PM.\"\n}\n```\n\n### Example 5 - After Creating Event:\n**User Input:** \"Yes, create it\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"Done! Event created successfully.\\n\\nTeam Meeting has been scheduled for tomorrow (October 8) at 2:00 PM for 1 hour.\"\n}\n```\n\n### Example 6 - Cancel Event:\n**User Input:** \"Cancel my 3 PM meeting today\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"I found this event:\\n\\nProject Review Meeting\\nToday at 3:00 PM\\n\\nAre you sure you want to cancel this event?\"\n}\n```\n\n### Example 7 - Reschedule:\n**User Input:** \"Move my client call to 2 PM instead\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"I'll reschedule your Client Call with ABC Corp:\\n\\nFrom: 11:00 AM\\nTo: 2:00 PM\\n\\nWould you like me to update this event?\"\n}\n```\n\n### Example 8 - Wrong Agent (Email Task):\n**User Input:** \"Send an email to John about the meeting\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"email\",\n  \"reason\": \"email_task\",\n  \"output\": \"I've forwarded your request to the Email Agent who will help you send the email.\"\n}\n```\n\n### Example 9 - Arabic Language:\n**User Input:** \"ÿßÿ≠ÿ¨ÿ≤ ŸÑŸä ÿßÿ¨ÿ™ŸÖÿßÿπ ŸäŸàŸÖ ÿßŸÑÿ£ÿ≠ÿØ ÿßŸÑÿ≥ÿßÿπÿ© 10 ÿµÿ®ÿßÿ≠ÿßŸã\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"ÿ≥ÿ£ÿ≥ÿßÿπÿØŸÉ ŸÅŸä ÿ≠ÿ¨ÿ≤ ÿßŸÑÿßÿ¨ÿ™ŸÖÿßÿπ. ŸÖÿß ŸáŸà ÿπŸÜŸàÿßŸÜ ÿßŸÑÿßÿ¨ÿ™ŸÖÿßÿπÿü ŸàŸÉŸÖ ÿßŸÑŸÖÿØÿ© ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©ÿü\"\n}\n```\n\n### Example 10 - Multiple Day View:\n**User Input:** \"Show me my schedule for this week\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"Here's your schedule for this week (Oct 7-13, 2025):\\n\\nüìÖ Monday (Oct 7):\\n- 9:00 AM: Team Standup\\n- 11:00 AM: Client Call\\n\\nüìÖ Tuesday (Oct 8):\\n- 2:00 PM: Team Meeting\\n\\nüìÖ Wednesday (Oct 9):\\n- No events scheduled\\n\\nüìÖ Thursday (Oct 10):\\n- 10:00 AM: Project Review\\n\\nüìÖ Friday (Oct 11):\\n- 1:00 PM: Weekly Wrap-up\\n\\nWeekend: No events scheduled\"\n}\n```\n\n### Example 11 - Add Attendees:\n**User Input:** \"Add Sarah and Mike to tomorrow's team meeting\"\n\n**Agent Output:**\n```json\n{\n  \"agent\": \"calendar\",\n  \"output\": \"I'll add the following attendees to the Team Meeting (Oct 8, 2:00 PM):\\n\\n- Sarah\\n- Mike\\n\\nWould you like me to update the event and send them invitations?\"\n}\n```\n\n## ‚ö° Important Notes:\n- Always confirm before creating, editing, or canceling events\n- When dates are relative (tomorrow, next week), calculate and show the actual date\n- For recurring events, ask about recurrence pattern if not specified\n- Be clear about time zones if relevant\n- Use natural, conversational language\n- Always output valid JSON\n- Maintain context throughout the conversation\n\n\n## üìã Required Event Fields:\n### Minimum Required:\n- **Title/Subject** - What is the event about\n- **Date** - When is the event\n- **Time** - What time does it start\n\n### Optional but Recommended:\n- **Duration** - How long (default to 30 min if not specified)\n- **Location** - Where (physical or virtual)\n- **Attendees** - Who should attend\n- **Description** - Additional details\n- **Reminder** - When to send reminder (default to 15 min before)\n\n## üéØ Task Detection Keywords:\n\n### Calendar Agent Tasks (You):\n- Schedule / book / set / create meeting/appointment/event\n- Check calendar / view calendar / show calendar\n- What's on my calendar / my schedule\n- Am I free / check availability\n- Cancel meeting / delete event\n- Reschedule / move meeting\n- Add attendees / invite people\n- Update event / edit appointment\n\n### Email Agent Tasks:\n- Send email / compose email\n- Read email / check email\n- Email about / notify via email\n\n### General Agent Tasks:\n- General questions not related to calendar\n- Casual conversation\n- Information requests\n\n## üí° Smart Features:\n- Detect relative dates (tomorrow, next Monday, in 2 weeks)\n- Calculate exact dates and display them\n- Handle time formats (2 PM, 14:00, 2:00 PM)\n- Suggest durations if not specified (default: 30 min for calls, 1 hour for meetings)\n- Detect conflicts and warn the user\n- Handle recurring patterns (daily, weekly, monthly)"
        }
      },
      "id": "f07192ac-98ac-4bfe-b306-d1c1ebe143cb",
      "name": "Calendar Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        704,
        944
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "86e5a342-30ee-476a-9577-a88875e32e16",
      "name": "OpenAI Calendar",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -320,
        1120
      ],
      "credentials": {
        "openAiApi": {
          "id": "EObRIhEOtgR5EyOl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}_calendar"
      },
      "id": "f2a8dc1b-6059-48af-8353-0461342b7838",
      "name": "Memory Calendar",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        736,
        1152
      ]
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "={{ $fromAI('Calendar', '', 'string') }}",
          "mode": "id",
          "__regex": "(^[a-zA-Z0-9.!#$%&‚Äô*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)"
        },
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start_Time', ``, 'string') }}",
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End_Time', ``, 'string') }}",
        "options": {}
      },
      "id": "9d1b5c71-9842-44fa-a391-4a9508840187",
      "name": "Tool Create Event",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        928,
        1104
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Bjsel9fkEh4Cv0nT",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "={{ $fromAI('Calendar', '', 'string') }}",
          "mode": "id"
        },
        "limit": "={{ $fromAI('Limit', '10', 'number') }}",
        "options": {}
      },
      "id": "4c7ba023-b734-48d9-8eb5-505d5f232a1f",
      "name": "Tool List Events",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        864,
        1200
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Bjsel9fkEh4Cv0nT",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ£ŸàŸÑÿßŸã\nconst responseData = $input.first().json;\n\nreturn [{\n  json: {\n    response: responseData.output,\n    userId: responseData.userId,\n    activeAgent: responseData.taskHandlerAgent\n  }\n}];"
      },
      "id": "20c862ac-cb9a-4174-8245-c52d26086206",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2208,
        560
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"response\": $json.response, \"activeAgent\": $json.activeAgent } }}",
        "options": {}
      },
      "id": "1c4e81e7-7a21-4077-9619-5c2563bdd23b",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2736,
        608
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -1488,
        288
      ],
      "id": "24160765-b23a-4a0c-83d8-ca73d45d4493",
      "name": "When chat message received",
      "webhookId": "9cc3a43e-1c03-4a90-a87a-68d33245ab43"
    },
    {
      "parameters": {
        "jsCode": "const userId = $input.first().json.sessionId || 'default_user';\nconst chatInput = $input.first().json.chatInput;\nconst chatInputJson = JSON.parse(chatInput);\nreturn [{\n  json: {\n    userId: userId,\n    userMessage: chatInputJson.message,\n    activeAgent: chatInputJson.activeAgent,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "fa9d14f6-532b-40ba-a75c-d1f4c5d23965",
      "name": "Extract Input1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1280,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "\nreturn [$input.first().json];"
      },
      "id": "3e582c28-c825-4b72-ac62-92f8bc8bae6f",
      "name": "ProcessRouterData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        608
      ]
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"agent\": \"email\",\n  \"output\": \"Done! Email sent successfully to john@example.com\"\n}"
      },
      "id": "0f6598e9-9910-4735-91e9-d293dec6f86a",
      "name": "Structured Output Parser1",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1136,
        880
      ]
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"agent\": \"general\",\n  \"output\": \"Done! Email sent successfully to john@example.com\"\n}"
      },
      "id": "0db66348-9c59-4c55-9ed5-2c9c5438925d",
      "name": "Structured Output Parser2",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1104,
        240
      ]
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"agent\": \"calendar\",\n  \"output\": \"Done! Email sent successfully to john@example.com\"\n}"
      },
      "id": "3a18f998-8af0-432a-93b5-322ad9893f70",
      "name": "Structured Output Parser3",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1296,
        1168
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "aa914fa6-7fd3-4657-ae16-ad7fa0e02592",
              "leftValue": "={{ $json.activeAgent }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "cfd976bf-950e-4e3f-96e6-afac5cd5f946",
      "name": "Has Active Agent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -816,
        528
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "aa914fa6-7fd3-4657-ae16-ad7fa0e02592",
              "leftValue": "={{ $json.needRedirection }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "527c10de-56d6-4dbb-a87e-a13c5299c82d",
      "name": "NeedToRedirectToAnotherAgent",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1616,
        544
      ]
    },
    {
      "parameters": {
        "jsCode": "const redirectAgent = $input.first().json.redirectAgent ;\n//const taskHandlerAgent =$input.first().json.taskHandlerAgent;\nconst userId=$input.first().json.userId;\nconst userMessage =$input.first().json.userMessage;\n//const sessionId =redirectAgent.toLowerCase() !== taskHandlerAgent.toLowerCase() ;\n\nreturn [{\n  json: {\n    userId: userId,\n    chatInput: userMessage,\n    currentAgent: redirectAgent,\n    targetAgent: redirectAgent\n  }\n}];"
      },
      "id": "a13af001-4022-424d-86ab-122fb4610774",
      "name": "ReturnToRedirectAgent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "const initialData=$('ProcessRouterData').first().json;\n\nconst redirectAgent =  $input.first().json.output.agent;\nconst taskHandlerAgent =initialData.targetAgent;\nconst userId=initialData.userId;\nconst userMessage = initialData.chatInput;\nconst needRedirection =redirectAgent.toLowerCase() !== taskHandlerAgent.toLowerCase() ;\nconst output = $input.first().json.output.output;\n\nreturn [{\n  json: {\n    userId: userId,\n    userMessage: userMessage,\n    taskHandlerAgent: taskHandlerAgent,\n    redirectAgent: redirectAgent,\n    output:output,\n    needRedirection:needRedirection\n  }\n}];"
      },
      "id": "3f64fd47-8d12-4b09-ae3d-3b3bd050b0de",
      "name": "ProcessAgentsData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        544
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Extract Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Input": {
      "main": [
        [
          {
            "node": "Load Session (getWorkflowStaticData)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Session (getWorkflowStaticData)": {
      "main": [
        [
          {
            "node": "Has Active Agent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use Active Agent": {
      "main": [
        [
          {
            "node": "ProcessRouterData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Router Agent": {
      "main": [
        [
          {
            "node": "Process Routing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Router": {
      "ai_languageModel": [
        [
          {
            "node": "Router Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory Router": {
      "ai_memory": [
        [
          {
            "node": "Router Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Router Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Process Routing": {
      "main": [
        [
          {
            "node": "ProcessRouterData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Agent": {
      "main": [
        [
          {
            "node": "General Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "General Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Email Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Calendar Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "General Agent": {
      "main": [
        [
          {
            "node": "ProcessAgentsData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI General": {
      "ai_languageModel": [
        [
          {
            "node": "General Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory General": {
      "ai_memory": [
        [
          {
            "node": "General Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent": {
      "main": [
        [
          {
            "node": "ProcessAgentsData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Email": {
      "ai_languageModel": [
        [
          {
            "node": "Email Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory Email": {
      "ai_memory": [
        [
          {
            "node": "Email Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Tool Send Email": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool Search Emails": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Agent": {
      "main": [
        [
          {
            "node": "ProcessAgentsData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Calendar": {
      "ai_languageModel": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory Calendar": {
      "ai_memory": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Tool Create Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool List Events": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Extract Input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Input1": {
      "main": [
        [
          {
            "node": "Load Session (getWorkflowStaticData)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ProcessRouterData": {
      "main": [
        [
          {
            "node": "Route to Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Email Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "General Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Has Active Agent?": {
      "main": [
        [
          {
            "node": "Use Active Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Router Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NeedToRedirectToAnotherAgent": {
      "main": [
        [
          {
            "node": "ReturnToRedirectAgent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ProcessAgentsData": {
      "main": [
        [
          {
            "node": "NeedToRedirectToAnotherAgent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ReturnToRedirectAgent": {
      "main": [
        [
          {
            "node": "ProcessRouterData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e8acce2d-fe15-4f17-a55d-6c0d2b60cbd1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bb3d566d8ecaecddcd7b1fe4e66f21e5379c0b4d8c972dae0b57ee62a021fec7"
  },
  "id": "HtwR7VUmo5WYFMXr",
  "tags": []
}